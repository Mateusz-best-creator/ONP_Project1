#ifndef __STRING_H__
#define __STRING_H__

#include <iostream>
#include "vector.h"
#include <cstring>

class String
{
private:
    char* m_Data;
    size_t m_Size;

public:
    // Constructor and destructor
    String()
    {
        m_Size = 0;
        m_Data = nullptr;
    }

    String(const char* string)
    {
        m_Size = strlen(string);
        m_Data = new char[m_Size];
        memcpy(m_Data, string, m_Size);
    }

    ~String()
    {
        delete[] m_Data;
    }

    // Overloaded operators
    String& operator+=(const String& other)
    {
        size_t total_size = m_Size + other.m_Size;
        char* new_data = new char[total_size + 1];

        strcpy(new_data, m_Data);
        strcat(new_data, other.m_Data);

        // Free memory of the current data
        delete[] m_Data;

        // Update data and size
        m_Data = new_data;
        m_Size = total_size;

        return *this;
    }

    String& operator+=(const char ch)
    {
        size_t total_size = m_Size + 1;
        char* new_data = new char[total_size];
        strcpy(new_data, this->m_Data);
        new_data[total_size - 1] = ch;

        // Free memory of the current data
        delete[] m_Data;

        // Update data and size
        m_Data = new_data;
        m_Size = total_size;

        return *this;
    }

    char& operator[](int index) { return m_Data[index]; }
    const char& operator[](int index) const { return m_Data[index]; }

    // Getters and setters
    size_t& size() { return m_Size; }
    const size_t& size() const { return m_Size; }
    char* get_data() { return m_Data; }
    const char* get_data() const { return m_Data; }

    // Friend functions
    friend std::ostream& operator<<(std::ostream& os, const String& str)
    {
        for (int i = 0; i < str.m_Size; i++)
        {
            os << str.m_Data[i];
        }
        return os;
    }

    friend std::istream& operator>>(std::istream& is, String& str)
    {
        char tempBuffer[1024]; 
        is.getline(tempBuffer, 1024); 

        size_t inputSize = strlen(tempBuffer); 

        delete[] str.m_Data; // Free existing data

        str.m_Size = inputSize;
        str.m_Data = new char[inputSize]; 
        strcpy(str.m_Data, tempBuffer);

        return is;
    }

    void clear()
    {
        m_Size = 0;
    }

    // Maps numbers to characters, 10 -> '10'
    String(int number)
    {
        Vector<int> numbers;
        while (number > 0)
        {
            int t = number % 10;
            number /= 10;
            numbers.push_back(t);
        }
        Vector<char> characters;
        for (int i = numbers.size() - 1; i >= 0; i--)
        {
            char temp;
            switch(numbers[i])
            {
            case 0: temp = '0'; break;
            case 1: temp = '1'; break;
            case 2: temp = '2'; break;
            case 3: temp = '3'; break;
            case 4: temp = '4'; break;
            case 5: temp = '5'; break;
            case 6: temp = '6'; break;
            case 7: temp = '7'; break;
            case 8: temp = '8'; break;
            case 9: temp = '9'; break;
            }
            characters.push_back(temp);
        }
        m_Size = characters.size(); 
        m_Data = new char[m_Size];
        for (int i = 0; i < characters.size(); i++)
        {
            m_Data[i] = characters[i];
        }
    }
};


#endif